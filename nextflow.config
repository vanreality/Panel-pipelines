/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    STPP Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

params {
    // Mandatory arguments
    input = null       // No default input
    step  = 'mapping'  // Starts with mapping

    // Genome and references options
    genome          = 'GATK.GRCh38'
    igenomes_base   = 's3://ngi-igenomes/igenomes/'
    igenomes_ignore = false
    save_reference  = false // Built references not saved

    // Main options
    split_fastq            = 50000000   // FASTQ files will not be split by default by FASTP
    intervals              = null       // Intervals with bed format to specify targeted regions
    nucleotides_per_second = 1000       // Default interval size
    tools                  = null       // No default Variant_Calling or Annotation tools
    skip_tools             = null       // All tools (markduplicates + baserecalibrator + QC) are used by default

    // Modify fastqs (trim/split) with FASTP
    trim_fastq          = false // No trimming
    clip_r1             = 0
    clip_r2             = 0
    three_prime_clip_r1 = 0
    three_prime_clip_r2 = 0
    trim_nextseq        = 0
    save_trimmed        = false
    save_split_fastqs   = false

    // Preprocessing
    aligner            = 'bwa-mem'  // Default is bwa-mem can be used
    use_gatk_spark     = null       // GATK Spark implementation of their tools in local mode not used by default
    save_bam_mapped    = false      // Mapped BAMs not saved
    save_output_as_bam = false      //Output files from preprocessing are saved as bam and not as cram files
    seq_center         = null       // No sequencing center to be written in read group CN field by aligner
    seq_platform       = 'ILLUMINA' // Default platform written in read group PL field by aligner

    // Variant Calling
    ignore_soft_clipped_bases = false   // no --dont-use-soft-clipped-bases for GATK Mutect2

    // Annotation
    vep_out_format      = 'vcf'
    vep_dbnsfp          = null  // dbnsfp plugin disabled within VEP
    dbnsfp              = null  // No dbnsfp processed file
    dbnsfp_tbi          = null  // No dbnsfp processed file index
    dbnsfp_consequence  = null  // No default consequence for dbnsfp plugin
    dbnsfp_fields       = "rs_dbSNP,HGVSc_VEP,HGVSp_VEP,1000Gp3_EAS_AF,1000Gp3_AMR_AF,LRT_score,GERP++_RS,gnomAD_exomes_AF" // Default fields for dbnsfp plugin
    vep_loftee          = null  // loftee plugin disabled within VEP
    vep_spliceai        = null  // spliceai plugin disabled within VEP
    spliceai_snv        = null  // No spliceai_snv file
    spliceai_snv_tbi    = null  // No spliceai_snv file index
    spliceai_indel      = null  // No spliceai_indel file
    spliceai_indel_tbi  = null  // No spliceai_indel file index
    vep_spliceregion    = null  // spliceregion plugin disabled within VEP
    snpeff_cache        = null  // No directory for snpEff cache
    vep_cache           = null  // No directory for VEP cache
    vep_include_fasta   = false // Don't use fasta file for annotation with VEP

    // Boilerplate options
    outdir                     = 'results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    help                       = false
    monochrome_logs            = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes,snpeff_version,vep_version'
    enable_conda               = false

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '16.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        singularity.runOptions = "-B /data:/data"
    }
}

// plugins directory 1 ~/.nextflow/plugins
// plugins directory 2 .nextflow/plr
// plugins {
//   id 'nf-amazon@1.10.5'
// }

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'stpp'
    author          = 'Shiyu Fan'
    description     = 'An analysis pipeline to detect somatic variants from NGS targeted sequencing data'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
