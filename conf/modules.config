/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
        ext.when   = When to run the module.
----------------------------------------------------------------------------------------
*/

process {

// PREPARE GENOME

    withName: 'BWA_INDEX' {
        ext.when         = { !params.bwa && params.step == "mapping" && params.aligner == "bwa-mem" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "bwa"
        ]
        container        = 'file://images/bwa_0.7.17.sif'
    }

    withName: 'GATK4_CREATESEQUENCEDICTIONARY' {
        ext.when         = { !params.dict && params.step != "annotate" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/dict" },
            pattern: "*dict"
        ]
        container        = 'file://images/gatk_4.2.6.1.sif'
    }

    withName: 'MSISENSORPRO_SCAN' {
        ext.when         = { params.tools && params.tools.split(',').contains('msisensorpro') }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/msi" },
            pattern: "*list"
        ]
        container        = 'file://images/msisensor-pro_1.2.0.sif'
    }

    withName: 'SAMTOOLS_FAIDX' {
        ext.when         = { !params.fasta_fai && params.step != "annotate" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/fai" },
            pattern: "*fai"
        ]
        container        = 'file://images/samtools_1.15.sif'
    }

    withName: 'TABIX_DBSNP' {
        ext.when         = { !params.dbsnp_tbi && params.dbsnp && (params.step == "mapping" || params.step == "markduplicates" || params.step == "prepare_recalibration") }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/dbsnp" },
            pattern: "*vcf.gz.tbi"
        ]
        container        = 'file://images/htslib_1.15.sif'
    }

    withName: 'TABIX_GERMLINE_RESOURCE' {
        ext.when         = { !params.germline_resource_tbi && params.germline_resource && params.tools && params.tools.split(',').contains('mutect2') }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/germline_resource" },
            pattern: "*vcf.gz.tbi"
        ]
        container        = 'file://images/htslib_1.15.sif'
    }

    withName: 'TABIX_KNOWN_SNPS' {
        ext.when         = { !params.known_snps_tbi && params.known_snps && (params.step == 'mapping' || params.step == "markduplicates" || params.step == 'prepare_recalibration' || (params.tools && params.tools.split(',').contains('haplotypecaller')) ) }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/known_snps" },
            pattern: "*vcf.gz.tbi"
        ]
        container        = 'file://images/htslib_1.15.sif'
    }

    withName: 'TABIX_KNOWN_INDELS' {
        ext.when         = { !params.known_indels_tbi && params.known_indels && (params.step == 'mapping' || params.step == "markduplicates" || params.step == 'prepare_recalibration' || (params.tools && params.tools.split(',').contains('haplotypecaller')) ) }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/known_indels" },
            pattern: "*vcf.gz.tbi"
        ]
        container        = 'file://images/htslib_1.15.sif'
    }

    withName: 'TABIX_PON' {
        ext.when         = { !params.pon_tbi && params.pon && params.tools && params.tools.split(',').contains('mutect2') }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/pon" },
            pattern: "*vcf.gz.tbi"
        ]
        container        = 'file://images/htslib_1.15.sif'
    }

// PREPARE INTERVALS

    withName: 'BUILD_INTERVALS' {
        container        = 'file://images/gawk_5.1.0.sif'
    }

    withName: 'CREATE_INTERVALS_BED' {
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
        container        = 'file://images/gawk_5.1.0.sif'
    }

    withName: 'GATK4_INTERVALLISTTOBED' {
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
        container        = 'file://images/gatk_4.2.6.1.sif'
    }

    withName: 'TABIX_BGZIPTABIX_INTERVAL_SPLIT' {
        ext.prefix       = {"${meta.id}"}
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed.gz"
        ]
        container        = 'file://images/htslib_1.15.sif'
    }

// MAPPING

    withName: 'FASTQC' {
        errorStrategy    = {task.exitStatus == 143 ? 'retry' : 'ignore'}
        ext.args         = '--quiet'
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('fastqc')) }
        publishDir       = [
            [
                path: { "${params.outdir}/reports/fastqc/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*{html,zip}"
            ]
        ]
        container        = 'file://images/fastqc_0.11.9.sif'
    }

    withName: 'FASTP' {
        ext.args = [ "",
            params.trim_fastq              ?: "--disable_adapter_trimming",
            params.clip_r1 > 0             ? "--trim_front1 ${params.clip_r1}" : "", // Remove bp from the 5' end of read 1.
            params.three_prime_clip_r1 > 0 ? "--trim_tail1 ${params.three_prime_clip_r1}" : "", // Remove bp from the 3' end of read 1 AFTER adapter/quality trimming has been performed.
            params.clip_r2   > 0           ? "--trim_front2 ${params.clip_r2}" : "", //Remove bp from the 5' end of read 2.
            params.three_prime_clip_r2 > 0 ? "--trim_tail2 ${params.three_prime_clip_r2}" : "", // Remove bp from the 3' end of read 2 AFTER adapter/quality trimming has been performed.
            params.trim_nextseq            ? "--trim_poly_g" : "", // Apply the --nextseq=X option, to trim based on quality after removing poly-G tails.
            params.split_fastq > 0         ? "--split_by_lines ${params.split_fastq * 4}" : "",

        ].join(" ").trim()
        publishDir = [
            [
                path: { "${params.outdir}/reports/fastp/${meta.sample}" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,json,log}"
            ],
            [
                enabled: params.save_trimmed || params.save_split_fastqs,
                path: { "${params.outdir}/preprocessing/fastp/${meta.sample}/" },
                mode: params.publish_dir_mode,
                pattern: "*.fastp.fastq.gz"
            ]
        ]
        container        = 'file://images/fastp_0.23.2.sif'
    }

    withName: "BWA_MEM" {
        ext.prefix       = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(reads.get(0).name.tokenize('.')[0]) : "" }
        ext.args         = { meta.status == 1 ? "-K 100000000 -Y -B 3 -R ${meta.read_group}" : "-K 100000000 -Y -R ${meta.read_group}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/" },
            pattern: "*bam",
            saveAs: { (params.save_bam_mapped || (params.skip_tools && params.skip_tools.split(',').contains('markduplicates'))) && (meta.size * meta.numLanes == 1) ? "mapped/${meta.id}/${it}" : null }
        ]
        container        = 'file://images/ngs_1.0.0.sif'
    }

    withName: 'MERGE_BAM' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/mapped/${meta.id}/" },
            pattern: "*bam"
        ]
        container        = 'file://images/samtools_1.15.sif'
    }

    withName: 'INDEX_MERGE_BAM' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/mapped/${meta.id}/" },
            pattern: "*bai"
        ]
        container        = 'file://images/samtools_1.15.sif'
    }

// MARKDUPLICATES

    withName: 'SAMTOOLS_CRAMTOBAM.*'{
        ext.args         = "-b"
    }

    withName: 'SAMTOOLS_BAMTOCRAM.*' {
        // BAM provided for step Markduplicates either run through MD or Convert -> then saved as md.cram
        // BAM files provided for step prepare_recal are converted and run through BQSR -> then saved as md.cram
        // BAM files provided for step recal are converted and run through BQSR II -> then saved as md.cram
        ext.args         = "-C"
        ext.prefix       = { (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) ? "${meta.id}.sorted" : "${meta.id}.md" }
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) ? "${params.outdir}/preprocessing/mapped/${meta.id}/" : "${params.outdir}/preprocessing/markduplicates/${meta.id}/" },
            pattern: "*{cram,crai}"
        ]
        container        = 'file://images/samtools_1.15.sif'
    }

    withName: 'SAMTOOLS_STATS_CRAM'{
        ext.prefix       = { (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) ? "${meta.id}.sorted.cram" : "${meta.id}.md.cram" }
        container        = 'file://images/samtools_1.15.sif'
    }

    withName: 'MOSDEPTH' {
        ext.args         = "-n --fast-mode --by 500"
        ext.prefix       = { params.skip_tools && params.skip_tools.split(',').contains('markduplicates') ? "${meta.id}.sorted" : "${meta.id}.md" }
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('mosdepth')) }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/mosdepth/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        container        = 'file://images/mosdepth_0.3.3.sif'
    }

    withName: 'GATK4_MARKDUPLICATES' {
        ext.args         = '-REMOVE_DUPLICATES false -VALIDATION_STRINGENCY LENIENT --CREATE_INDEX true'
        ext.prefix       = { "${meta.id}.md" }
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) }
        publishDir       = [
            [
                enabled: params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/markduplicates/${meta.id}/" },
                pattern: "*{bam,bai}"
            ],
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reports/" },
                pattern: "*metrics",
                saveAs: { !(params.skip_tools && params.skip_tools.split(',').contains('markduplicates_report')) ? "markduplicates/${meta.id}/${it}" : null}
            ]
        ]
        container        = 'file://images/gatk_4.2.6.1.sif'
    }

// PREPARE BQSR

    withName: 'SAMTOOLS_BAMTOCRAM' {
        ext.args         = "-C"
        ext.prefix       = { (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) ? "${meta.id}.sorted" : "${meta.id}.md" }
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('baserecalibrator')) }
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) ? "${params.outdir}/preprocessing/mapped/${meta.id}/" : "${params.outdir}/preprocessing/markduplicates/${meta.id}/" },
            pattern: "*{cram,crai}"
        ]
        container        = 'file://images/samtools_1.15.sif'
    }

    withName: 'BASERECALIBRATOR' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.recal" : "${meta.id}_${intervals.simpleName}.recal" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/" },
            pattern: "*table",
            saveAs: { meta.num_intervals > 1 ? null : "recal_table/${meta.id}/${it}" }
        ]
        container        = 'file://images/gatk_4.2.6.1.sif'
    }

    withName: 'GATHERBQSRREPORTS' {
        ext.prefix       = {"${meta.id}.recal"}
        ext.when         = { meta.num_intervals > 1 }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/recal_table/${meta.id}/" },
            pattern: "*table",
        ]
        container        = 'file://images/gatk_4.2.6.1.sif'
    }

// BQSR

    withName: 'APPLYBQSR' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.recal" : "${meta.id}_${intervals.simpleName}.recal" }
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/" },
            pattern: "*cram",
            saveAs: { meta.num_intervals > 1 ? null : "recalibrated/${meta.id}/${it}" }
        ]
        container        = 'file://images/gatk_4.2.6.1.sif'
    }

    if ((params.step == 'mapping' || params.step == 'markduplicates'|| params.step == 'prepare_recalibration'|| params.step == 'recalibrate') && (!(params.skip_tools && params.skip_tools.split(',').contains('baserecalibrator')))) {
        withName: 'MAIN_STPP:STPP:RECALIBRATE:MERGE_INDEX_CRAM:MERGE_CRAM' {
            ext.prefix       = { "${meta.id}.recal" }
            ext.when         = { meta.num_intervals > 1 }
            publishDir       = [
                enabled: !params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/recalibrated/${meta.id}/" },
                pattern: "*cram"
            ]
            container        = 'file://images/samtools_1.15.sif'
        }

        withName: 'MAIN_STPP:STPP:RECALIBRATE:MERGE_INDEX_CRAM:INDEX_CRAM' {
            publishDir       = [
                enabled: !params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/recalibrated/${meta.id}/" },
                pattern: "*{recal.cram,recal.cram.crai}"
            ]
            container        = 'file://images/samtools_1.15.sif'
        }
    }

    if ((params.step == 'mapping' || params.step == 'markduplicates'|| params.step == 'prepare_recalibration'|| params.step == 'recalibrate') && (!(params.skip_tools && params.skip_tools.split(',').contains('baserecalibrator')))) {
        withName: 'MAIN_STPP:STPP:CRAM_QC:MOSDEPTH' {
            ext.prefix       = { "${meta.id}.recal" }
        }

        withName: 'MAIN_STPP:STPP:CRAM_QC:SAMTOOLS_STATS' {
            ext.prefix       = { "${meta.id}.recal.cram" }
            ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reports/samtools/${meta.id}" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            container        = 'file://images/samtools_1.15.sif'
        }
    }

    withName: 'SAMTOOLS_CRAMTOBAM_RECAL'{
        ext.prefix       = { "${meta.id}.recal" }
        ext.when         = { params.save_output_as_bam}
        publishDir       = [
            enabled: params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/recalibrated/${meta.id}/" },
            pattern: "*{recal.bam,recal.bam.bai}"
        ]
        container        = 'file://images/samtools_1.15.sif'
    }

    withName: 'SAMTOOLS_BAMTOCRAM_VARIANTCALLING' {
        ext.prefix       = { "${meta.id}.recal" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/recalibrated/${meta.id}/" },
            pattern: "*{cram,crai}"
        ]
        container        = 'file://images/samtools_1.15.sif'
    }


}



